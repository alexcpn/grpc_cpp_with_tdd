// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cvmat.proto

#ifndef PROTOBUF_cvmat_2eproto__INCLUDED
#define PROTOBUF_cvmat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class MatInput;
class MatInputDefaultTypeInternal;
extern MatInputDefaultTypeInternal _MatInput_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;

namespace protobuf_cvmat_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cvmat_2eproto

// ===================================================================

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 response = 1;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  ::google::protobuf::int32 response() const;
  void set_response(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 response_;
  mutable int _cached_size_;
  friend struct protobuf_cvmat_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MatInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MatInput) */ {
 public:
  MatInput();
  virtual ~MatInput();

  MatInput(const MatInput& from);

  inline MatInput& operator=(const MatInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatInput& default_instance();

  static inline const MatInput* internal_default_instance() {
    return reinterpret_cast<const MatInput*>(
               &_MatInput_default_instance_);
  }

  void Swap(MatInput* other);

  // implements Message ----------------------------------------------

  inline MatInput* New() const PROTOBUF_FINAL { return New(NULL); }

  MatInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MatInput& from);
  void MergeFrom(const MatInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MatInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes cvmat = 1;
  void clear_cvmat();
  static const int kCvmatFieldNumber = 1;
  const ::std::string& cvmat() const;
  void set_cvmat(const ::std::string& value);
  #if LANG_CXX11
  void set_cvmat(::std::string&& value);
  #endif
  void set_cvmat(const char* value);
  void set_cvmat(const void* value, size_t size);
  ::std::string* mutable_cvmat();
  ::std::string* release_cvmat();
  void set_allocated_cvmat(::std::string* cvmat);

  // @@protoc_insertion_point(class_scope:MatInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr cvmat_;
  mutable int _cached_size_;
  friend struct protobuf_cvmat_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// int32 response = 1;
inline void Response::clear_response() {
  response_ = 0;
}
inline ::google::protobuf::int32 Response::response() const {
  // @@protoc_insertion_point(field_get:Response.response)
  return response_;
}
inline void Response::set_response(::google::protobuf::int32 value) {
  
  response_ = value;
  // @@protoc_insertion_point(field_set:Response.response)
}

// -------------------------------------------------------------------

// MatInput

// bytes cvmat = 1;
inline void MatInput::clear_cvmat() {
  cvmat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatInput::cvmat() const {
  // @@protoc_insertion_point(field_get:MatInput.cvmat)
  return cvmat_.GetNoArena();
}
inline void MatInput::set_cvmat(const ::std::string& value) {
  
  cvmat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MatInput.cvmat)
}
#if LANG_CXX11
inline void MatInput::set_cvmat(::std::string&& value) {
  
  cvmat_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:MatInput.cvmat)
}
#endif
inline void MatInput::set_cvmat(const char* value) {
  
  cvmat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MatInput.cvmat)
}
inline void MatInput::set_cvmat(const void* value, size_t size) {
  
  cvmat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MatInput.cvmat)
}
inline ::std::string* MatInput::mutable_cvmat() {
  
  // @@protoc_insertion_point(field_mutable:MatInput.cvmat)
  return cvmat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatInput::release_cvmat() {
  // @@protoc_insertion_point(field_release:MatInput.cvmat)
  
  return cvmat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatInput::set_allocated_cvmat(::std::string* cvmat) {
  if (cvmat != NULL) {
    
  } else {
    
  }
  cvmat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cvmat);
  // @@protoc_insertion_point(field_set_allocated:MatInput.cvmat)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cvmat_2eproto__INCLUDED
